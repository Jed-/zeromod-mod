// talking barmen and irc/cross-server stuff
// this is the configuration currently used on Free #beer!
// make sure Bud is there
delbar
addbar "Bud"

// *** SAUER TO IRC MESSAGES ***

// irc channel
channel = "#bud"
// log file read by irc bot
chatlog = "chat.txt"
// function to pass messages to irc channel
irclog = [ // str
	logto $chatlog (concat ":m" $channel $arg1)
]
// function to execute commands on irc channel
irccmd = [ // str
	logto $chatlog (concat ":" $arg1)
]
// player joins
onjoin = [ // cn
	cn = $arg1
	joinstr = (concatword "[join] " (getclientcolorname $cn) " has joined")
	if (!=s (getcountry $cn) "unknown") [
		joinstr = (concatword $joinstr " from ")
	]
	if (!=s (gettown $cn) "unknown") [
		joinstr = (concatword $joinstr (gettown $cn) ", ")
	]
	if (!=s (getregion $cn) "unknown") [
		joinstr = (concatword $joinstr (getregion $cn) ", ")
	]
	if (!=s (getcountry $cn) "unknown") [
		joinstr = (concatword $joinstr (getcountry $cn))
	]
	irclog $joinstr
]
// player leaves
onleave = [ // cn
	cn = $arg1
	leavestr = (concatword "[leave] " (getclientcolorname $cn) " has left")
	irclog $leavestr
]
// player changes name
onrename = [ // cn newname
	cn = $arg1
	newname = $arg2
	renamestr = (concatword "[rename] " (getclientcolorname $cn) " is now known as " $newname)
	irclog $renamestr
]
// player claims/relinquishes master
onsetmaster = [ // cn oldpriv priv hidden
	cn = $arg1
	oldpriv = $arg2
	priv = $arg3
	hidden = $arg4
	privs = ["none" "master" "auth" "admin" "root"]
	setmasterstr = (concatword "[priv] " (getclientcolorname $cn))
	if $priv [
		setmasterstr = (concatword $setmasterstr " claimed " (at $privs $priv))
	] [
		setmasterstr = (concatword $setmasterstr " relinquished " (at $privs $oldpriv))
	]
	if $hidden [
		setmasterstr = (concatword $setmasterstr " (hidden)")
	]
	irclog $setmasterstr
]
// mastermode changes
onmastermode = [ // cn mm
	cn = $arg1
	mm = $arg2
	mms = ["auth" "open" "veto" "locked" "private" "password"]
	mmstr = (concatword "[info] mastermode is " (at $mms (+ $mm 1)) " (" $mm ")")
	if (>= $cn 0) [
		mmstr = (concatword "[info] " (getclientcolorname $cn) " set mastermode to " (at $mms (+ $mm 1)) " (" $mm ")")
	]
	irclog $mmstr
]
// player kicks victim
onkick = [ // kicker victim reason
	kicker = $arg1
	victim = $arg2
	reason = $arg3
	kname = "server"
	if (>= $kicker 0) [
		kname = (getclientcolorname $kicker)
	]
	vname = (getclientcolorname $victim)
	kickstr = (concatword "[kick] " $kname " kicked " $vname)
	if (!=s $reason "") [
		kickstr = (concatword $kickstr " because: " $reason)
	]
	irclog $kickstr
]
// player chat
onchat = [ // cn text
	cn = $arg1
	text = $arg2
	irclog (concatword (getclientcolorname $cn) ": " $text)
	parsebar $cn $text
]

// *** TALKING BARMEN SYSTEM ***

// function to get list of barmen
barlist = [
	out = []
	looplist cn (listclients) [
		if (&& [isai $cn] [isspectator $cn]) [
			out = (concat $out $cn)
		]
	]
	result $out
]
// strings barmen can understand and answer to
// this is the list of all the things you can tell to a barman
// may look strange but it's the most efficient way to do it
// also, it's still cubescript
barstrings = [
	// bud hi / hi bud
	[[##BARNAME {{histrings] [bar_answer_hi ##BARCN ##CN]]
	[[{{histrings ##BARNAME] [bar_answer_hi ##BARCN ##CN]]
	
	// player asks for a drink
	[[##BARNAME {{drinks_all] [bar_answer_drink ##BARCN (bar_get_drink ##1 1) 1 ##CN ##CN]]
	[[##BARNAME {{astrings {{drinks_all] [bar_answer_drink ##BARCN (bar_get_drink ##2 1) 1 ##CN ##CN]]
	[[##BARNAME !!INT {{drinks_all] [bar_answer_drink ##BARCN (bar_get_drink ##2 ##1) ##1 ##CN ##CN]]
	[[##BARNAME {{givestrings {{drinks_all] [bar_answer_drink ##BARCN (bar_get_drink ##2 1) 1 ##CN ##CN]]
	[[##BARNAME {{givestrings {{drinks_all {{tostrings !!STR] [bar_answer_drink ##BARCN (bar_get_drink ##2 1) 1 ##CN (bar_get_to_cn ##4 ##CN)]]
	[[##BARNAME {{givestrings {{astrings {{drinks_all }}tostrings] [bar_answer_drink ##BARCN (bar_get_drink ##3 1) 1 ##CN ##CN]]
	[[##BARNAME {{givestrings {{astrings {{drinks_all {{tostrings !!STR] [bar_answer_drink ##BARCN (bar_get_drink ##3 1) 1 ##CN (bar_get_to_cn ##5 ##CN)]]
	[[##BARNAME {{givestrings !!INT {{drinks_all }}tostrings] [bar_answer_drink ##BARCN (bar_get_drink ##3 ##2) ##2 ##CN ##CN]]
	[[##BARNAME {{givestrings !!INT {{drinks_all {{tostrings !!STR] [bar_answer_drink ##BARCN (bar_get_drink ##3 ##2) ##2 ##CN (bar_get_to_cn ##5 ##CN)]]
	[[##BARNAME {{givestrings ~~astrings {{drinks_all }}tostrings] [bar_answer_drink ##BARCN (bar_get_drink ##3 1) ##1 ##CN (bar_get_to_cn ##2 ##CN)]]
	[[##BARNAME {{givestrings !!STR {{astrings {{drinks_all] [bar_answer_drink ##BARCN (bar_get_drink ##4 1) 1 ##CN (bar_get_to_cn ##2 ##CN)]]
	[[##BARNAME {{givestrings !!STR !!INT {{drinks_all] [bar_answer_drink ##BARCN (bar_get_drink ##4 ##3) ##3 ##CN (bar_get_to_cn ##2 ##CN)]]
	
	// bud menu
	[[##BARNAME {{menustrings] [bar_answer_menu ##BARCN ##CN]]
	
	// sauer to irc commands
	[[##BARNAME mode !!STR !!STR] [bar_irc_mode ##BARCN ##CN ##1 ##2]] // bud mode +o Jed
	[[##BARNAME set mode !!STR !!STR] [bar_irc_mode ##BARCN ##CN ##1 ##2]] // bud set mode +o Jed
]
// set mode of irc user
bar_irc_mode = [ // barcn cn mode user
	barcn = $arg1
	cn = $arg2
	mode = $arg3
	user = $arg4
	if (>= (getclientpriv $cn) 3) [ // player is admin: ok
		irccmd (concat "mode" $mode $user)
	] [ // player is not admin: not ok
		str = (concatword "Sorry " (at (getclientcolorname $cn) 0) ", you must be admin to set irc privileges")
		fakesay $barcn $str
		irclog $str
	]
]
// function to get correct drink name from user input
// if player says '2 beer', it will return 'beers', which is correct
// if player says 'a beers', it will return 'beer' instead
bar_get_drink = [ // drink num
	drink = $arg1
	num = $arg2
	drinklist = drinks_one
	drinkothers = drinks_more
	if (!= $num 1) [
		drinklist = drinks_more
		drinkothers = drinks_one
	]
	if (>= (indexof $$drinklist $drink) 0) [
		result $drink
	] [
		result (at $$drinklist (indexof $$drinkothers $drink))
	]
]
// it's possible that a drink has to be given to multiple players
// like 'bud give player a beer'
// if there are 'player1' and 'player2' connected to server,
// bud should give a beer to both player1 and player2
// this function translates user input into a list of clientnums
// to be used by other functions
bar_get_to_cn = [ // in from
	in = $arg1
	from = $arg2
	out = []
	looplist i $in [
		out = (concat $out (bar_get_to_cn_one $i $from))
	]
	result $out
]
// this function actually does the job described above,
// taking a single word as input
// above function might be changed later to support multiple names,
// each of which will be parsed by this one
bar_get_to_cn_one = [ // in from
	in = (lowerstring $arg1)
	from = $arg2
	out = []
	// attempt #1: me, I
	looplist me $mestrings [
		if (=s $in (lowerstring $me)) [
			out = $from
		]
	]
	if (! (listlen $out)) [
		// attempt #2: direct nickname
		looplist cn (listclients) [
			if (=s $in (lowerstring (at (getclientcolorname $cn) 0))) [
				out = (concat $out $cn)
			]
		]
	]
	if (! (listlen $out)) [
		// attempt #3: partial nickname
		looplist cn (listclients) [
			if (>= (strstr (lowerstring (at (getclientcolorname $cn) 0)) $in) 0) [
				out = (concat $out $cn)
			]
		]
	]
	if (! (listlen $out)) [
		// attempt #4: nickname contained
		looplist cn (listclients) [
			if (>= (strstr $in (lowerstring (at (getclientcolorname $cn) 0))) 0) [
				out = (concat $out $cn)
			]
		]
	]
	if (! (listlen $out)) [
		// attempt #5: direct cn
		if (&& [|| [=s $in "0"] [> $in 0]] [!=s (getclientcolorname $in) ""]) [
			out = $in
		]
	]
	if (! (listlen $out)) [
		// no results
		result -1
	] [
		result $out
	]
]
// barman answer to 'hi' messages
bar_answer_hi = [ // botcn cn
	botcn = $arg1
	cn = $arg2
	str = (concatword "Hey " (at (getclientcolorname $cn) 0) "!")
	fakesay $botcn $str
	irclog $str
]
// barman answer to drink requests
bar_answer_drink = [ // botcn drink num from to
	botcn = $arg1
	drink = $arg2
	num = $arg3
	from = $arg4
	to = $arg5
	validto = []
	looplist t $to [
		if (!=s (getclientcolorname $t) "") [
			validto = (concat $validto $t)
		]
	]
	tolist = (prettylist $validto "and")
	if (listlen $validto) [
		str = (concatword "Here" (? (= $num 1) "'s" " are") (? (&& [= (listlen $to) 1] [= (at $to 0) $from]) " your " (concatword " " (? (= $num 1) "a" $num) " ")) $drink (? (&& [= (listlen $to) 1] [= (at $to 0) $from]) (concatword ", " (at (getclientcolorname $validto) 0)) (concatword " for " (at (getclientcolorname $tolist) 0))) "!")
		fakesay $botcn $str
		irclog $str
		looplist t $validto [
			offer $from $t $drink $num
		]
	]
]
// barman answer to menu requests
bar_answer_menu = [ // botcn cn
	botcn = $arg1
	cn = $arg2
	list = $arg3
	str = (concatword "Here's the menu, " (at (getclientcolorname $cn) 0) ": " $drinks_one)
	fakesay $botcn $str
	irclog $str
]
// function that reads chat input from player and checks
// if it matches any of the 'barstrings' defined above
parsebar = [ // cn text
	playercn = $arg1
	text = $arg2
	looplist barman (barlist) [
		barstrings_this = (barstrings_convert $barstrings (at (getclientcolorname $barman) 0) $barman)
		// check if any strings are matched
		looplist str $barstrings_this [
			if (listlen $text) [
				string = (at $str 0)
				command = (at $str 1)
				args = []
				matching = 0
				attempts = 0
				while [&& [! $matching] [> (- (listlen $text) $attempts) 0]] [
					matching = 1
					command_args = []
					loop i (listlen $string) [
						word = (at $string $i)
						if $matching [
							if (=s (substr $word 0 2) "!!") [ // integer or string
								if (=s (substr $word 2 3) "INT") [ // integer
									integer = ""
									textword = (at $text (+ $i $attempts))
									loop j (strlen $textword) [ // check if is integer
										digits = []
										if (= $j 0) [
											digits = [+ - 0 1 2 3 4 5 6 7 8 9]
										] [
											digits = [0 1 2 3 4 5 6 7 8 9]
										]
										if (< (indexof $digits (substr $textword $j 1)) 0) [ // not an integer
											matching = 0
										] [
											integer = (concatword $integer (substr $textword $j 1)) 
										]
									]
									if $matching [
										command_args = (concat $command_args $integer)
									]
								] [
									if (=s (substr $word 2 3) "STR") [ // string
										command_args = (concat $command_args (at $text (+ $i $attempts))) // anything can be a string, so always matching
									]
								]
							] [
								if (=s (substr $word 0 2) "{{") [ // inside list
									list = (substr $word 2 (- (strlen $word) 2))
									if (! (getalias $list)) [ // list doesn't exist, not matching
										matching = 0
									] [
										matching = 0
										looplist w $$list [
											if (&& [! $matching] [=s (lowerstring (at $text (+ $i $attempts))) (lowerstring $w)]) [
												matching = 1
												command_args = (concat $command_args (lowerstring (at $text (+ $i $attempts))))
											]
										]
									]
								] [
									if (=s (substr $word 0 2) "}}") [ // outside list
										list = (substr $word 2 (- (strlen $word) 2))
										if (! (getalias $list)) [ // list doesn't exist, matching
											matching = 1
										] [
											matching = 1
											looplist w $$list [
												if (&& $matching [=s (lowerstring (at $text (+ $i $attempts))) (lowerstring $w)]) [
													matching = 0
												]
											]
											if $matching [
												command_args = (concat $command_args (lowerstring (at $text (+ $i $attempts))))
											]
										]
									] [
										if (=s (substr $word 0 2) "~~") [ // outside list, not integer
											list = (substr $word 2 (- (strlen $word) 2))
											nolist = 1
											if (! (getalias $list)) [ // list doesn't exist
											] [
												looplist w $$list [
													if (&& $nolist [=s (lowerstring (at $text (+ $i $attempts))) (lowerstring $w)]) [
														nolist = 0
													]
												]
												if $nolist [
													integer = 1
													loop j (strlen (at $text (+ $i $attempts))) [ // check if is integer
														digits = []
														if (= $j 0) [
															digits = [+ - 0 1 2 3 4 5 6 7 8 9]
														] [
															digits = [0 1 2 3 4 5 6 7 8 9]
														]
														if (&& $integer [< (indexof $digits (substr (at $text (+ $i $attempts)) $j 1)) 0]) [ // not an integer
															integer = 0
														]
													]
													if (! $integer) [
														command_args = (concat $command_args (lowerstring (at $text (+ $i $attempts))))
													]
												]
											]
										] [ // normal word
											if (!=s (lowerstring $word) (lowerstring (at $text (+ $i $attempts)))) [ // word doesn't match
												matching = 0
											]
										]
									]
								]
							]
						]
					]
					if $matching [
						args = $command_args
					]
					attempts = (+ $attempts 1)
				]
				if $matching [
					words = (separate_words $command)
					looplist word $words [
						if (=s (substr $word 0 2) "##") [ // special argument
							is_number = 1
							number = ""
							word = (substr $word 2 (- (strlen $word) 2))
							loop i (strlen $word) [
								if $is_number [
									digits = [0 1 2 3 4 5 6 7 8 9]
									if (< (indexof $digits (substr $word $i 1)) 0) [
										is_number = 0
									] [
										number = (concatword $number (substr $word $i 1))
									]
								]
							]
							if $is_number [ // valid argument number
								command = (strreplace $command (concatword "##" $number) (at $args (- $number 1)))
							]
						]
					]
					command = (strreplace $command "##CN" $playercn)
					do $command
				]
			]
		]
	]
]
// although strings in cubescript are lists of words,
// each of which can be returned with the 'at' command,
// this doesn't work if the string contains '(' and ')',
// in that case, the full block inside '(' and ')' is returned
// we want to parse every single word, even words inside '(' and ')',
// so we must do it ourselves
// this function might destroy the string, removing '(' and ')',
// but will return a list of every word, so that they can be used by strreplace
separate_words = [ // in
	in = $arg1
	out = []
	looplist i $in [
		out = (concat $out $i)
	]
	dup = 0
	looplist o $out [
		if (&& [! $dup] [> (listlen $o) 1]) [
			dup = 1
		]
	]
	if $dup [
		result (separate_words $out)
	] [
		result $out
	]
]
// this function is called by parsebar to put barman name and barman cn
// into 'barstrings' to help determine if a barman was called by the player
barstrings_convert = [ // barstrings name cn
	_barstrings = $arg1
	name = $arg2
	cn = $arg3
	out = []
	looplist str $_barstrings [
		string = (at $str 0)
		command = (at $str 1)
		string = (strreplace $string "##BARNAME" $name)
		string = (strreplace $string "##BARCN" $cn)
		command = (strreplace $command "##BARNAME" $name)
		command = (strreplace $command "##BARCN" $cn)
		out = (concatword $out "^n[[" $string "] [" $command "]]")
	]
	result $out
]
// lists that can help string parsing by allowing less restrictions
// to barman command sintax
astrings = ["a" "an"]
mestrings = ["me" "i"]
givestrings = ["give" "offer"]
tostrings = ["to" "for"]
histrings = ["hi" "hey" "hello"]
menustrings = ["menu" "list"]
// lists of drinks
drinks_one = ["beer"]
drinks_more = ["beers"]
// these two below should be left empty, they will be filled later
drinks_all = []
drinks = []
// here the two above are filled
loop i (listlen $drinks_one) [
	drinks = (concatword $drinks "^n[[" (at $drinks_one $i) "] [" (at $drinks_more $i) "]]")
	drinks_all = (concatword $drinks_all "^n[" (at $drinks_one $i) "] [" (at $drinks_more $i) "]")
]

// *** IRC CONFIGURATION ***

// function to reverse the order of the characters in a string
// used in irc parsing of some messages
flipstr = [ // in
	in = $arg1
	out = ""
	loop i (strlen $in) [
		out = (concatword $out (substr $in (- (strlen $in) (+ $i 1)) 1))
	]
	result $out
]
// this function is useful to parse messages from Térence's server irc bot
// most of them are colored, so we have to remove color from the messages
// in order to make something useful with them
// this might cut down a few nicknames, but it would only happen very rarely,
// as they would have to start with 'Â' followed by one or two digits
nocolor = [ // in -- needed because of remod's IRC colored messages
	// 0x03 is Â ""
	// 0x0F is É
	// 0x1D is Ù
	// 0x1F is Û
	// 0x02 is Á
	in = $arg1
	numbers = [0 1 2 3 4 5 6 7 8 9]
	if (=s (substr $in 0 1) "Â") [ // is colored?
		if (> (indexof $numbers (substr $in 1 1)) -1) [ // is colored
			in = (substr $in 1 (strlen $in)) // remove 0x03 (Â)
			loop i 2 [ // can have up to 2 color numbers
				if (> (indexof $numbers (substr $in 0 1)) -1) [ // starts with number
					in = (substr $in 1 (strlen $in)) // remove number
				]
			]
		]
	]
	result $in
]
// replacement for 'at' for some messages
// this one sometimes works better
getword = [ // str idx
	str = $arg1
	idx = $arg2
	current_word = -1
	current_spaces = 0
	word = ""
	out = ""
	loop i (+ (strlen $str) 1) [
		if (=s $out "") [
			if (|| [&& [!=s $word ""] [=s (substr $str $i 1) " "]] [=s (substr $str $i 1) ""]) [ // word end
				if (= $current_word $idx) [
					out = $word
				]
				word = ""
				current_spaces = 1
			] [ // character
				if (!=s (substr $str $i 1) " ") [
					char = (substr $str $i 1)
					if (|| $current_spaces [=s $word ""]) [
						current_spaces = 0
						current_word = (+ $current_word 1)
					]
					word = (concatword $word $char)
				]
			]
		]
	]
	result $out
]
// irc message parser
IRC = [ // chan buf
	chan = (unescape $arg1)
	buf = (unescape $arg2)
	barmen = []
	looplist cn (listclients) [
		if (&& [isai $cn] [isspectator $cn]) [
			barmen = (concat $barmen $cn)
		]
	]
	if (listlen $barmen) [
		barcn = (at $barmen 0)
		ircname = (getword $buf 0)
		if (&& [=s (substr $ircname 0 1) "<"] [=s (substr $ircname (- (strlen $ircname) 1) 1) ">"]) [ // <name>
			_ircname = (substr $ircname 1 (- (strlen $ircname) 2))
			if (!=s $_ircname "Bud") [ // ignore messages from bud, to prevent double messages
				// parser for Térence's mod, it might be a bit hard to understand how it exactly works
				if (=s $_ircname "Xbot") [ // Racing Xtreme bot is talking
					server_name = "Racing Xtreme" // name of current server whose bot's output is being processed
					message = (nocolor (substr $buf (+ (strlen $ircname) 1) (strlen $buf))) // get bot's message
					firstword = (getword $message 0)
					if (=s $firstword "CONNECT") [ // CONNECT name(cn) from country [players/max] -- remod makes it a bit hard to parse (and Terence even more)
						player = (getword $message 1) // name(cn)
						player_rev = (flipstr $player) // )nc(eman -- must flip string to get last entry
						cn_pos = (strstr $player_rev "(") // find first occurrency of "(" in flipped name -- aka the last in original name
						if (> $cn_pos -1) [ // should always be true
							player_rev = (substr $player_rev (+ $cn_pos 1) (strlen $player_rev)) // eman -- chop flipped name
							player = (flipstr $player_rev) // name -- flip flipped name
						]
						// we have player name now
						country = (substr $message (+ (+ (+ (strlen "CONNECT") (strlen "from")) (strlen (getword $message 1))) 3) (strlen $message)) // United States [10/24] -- can't just use (at $message 2) because might be "(United States)"; this somehow returns everything after the second argument
						numplayers = (at $message (- (listlen $message) 1)) // [10/24]
						country = (substr $country 0 (- (strlen $country) (+ (strlen $numplayers) 3))) // United States
						// we have both player name and country now
						zwall (concatword "^f0join: ^f7" $player " on ^f1" $server_name "^f7 from ^f1" $country)
					] [
						if (=s $firstword "DISCONNECT") [ // DISCONNECT name(cn) - Connection time: 00h 00m 00s -- ignore time, only consider name
							player = (getword $message 1) // name(cn)
							player_rev = (flipstr $player) // )nc(eman
							cn_pos = (strstr $player_rev "(")
							if (> $cn_pos -1) [
								player_rev = (substr $player_rev (+ $cn_pos 1) (strlen $player_rev)) // eman
								player = (flipstr $player_rev) // name
							]
							// we have player name
							zwall (concatword "^f4leave: ^f7" $player " from ^f1" $server_name)
						] [
							// can be anything else, only consider rename and chat
							player = (getword $message 0)
							if (&& [!=s (substr $player (- (strlen $player) 1) 1) ":"] [=s (getword $message 1) "is"] [=s (getword $message 2) "now"] [=s (getword $message 3) "known"] [=s (getword $message 4) "as"]) [ // now we are sure we have a rename, name is colored
								player = (nocolor $player) // name(cn)
								player_rev = (flipstr $player) // )nc(eman
								cn_pos = (strstr $player_rev "(")
								if (> $cn_pos -1) [
									player_rev = (substr $player_rev (+ $cn_pos 1) (strlen $player_rev)) // eman
									player = (flipstr $player_rev) // name
								]
								// we have old name
								newname = (nocolor (getword $message 5)) // name
								// we have both old and new name
								zwall (concatword $player " is now known as " $newname)
							] [
								if (=s (substr $player (- (strlen $player) 1) 1) ":") [ // name ends with ":", is chat, name is not colored
									chat = (substr $message (+ (strlen $player) 1) (strlen $message))
									// we already have chat
									player = (substr $player 0 (- (strlen $player) 1)) // name(cn)
									player_rev = (flipstr $player) // )nc(eman
									cn_pos = (strstr $player_rev "(")
									if (> $cn_pos -1) [
										player_rev = (substr $player_rev (+ $cn_pos 1) (strlen $player_rev)) // eman
										player = (flipstr $player_rev) // name
										// we have both name and chat
										fakesayas $barcn $player $chat
									]
								]
							]
						]
					]
				] [
					text = (substr $buf (+ (strlen $ircname) 1) (strlen $buf))
//				fakesay $barcn (concatword $_ircname ": " $text)
					fakesayas $barcn $_ircname $text
				]
			]
		]
	] [
		// messages from other servers won't be parsed properly if no barman is on the server
		// this feature might be added later
		barcn = (at $barmen 0)
		ircname = (getword $buf 0)
		if (&& [=s (substr $ircname 0 1) "<"] [=s (substr $ircname (- (strlen $ircname) 1) 1) ">"]) [ // <name>
			_ircname = (substr $ircname 1 (- (strlen $ircname) 2))
			if (!=s $_ircname "Bud") [
				text = (substr $buf (+ (strlen $ircname) 1) (strlen $buf))
				zwall (concatword "^f1[^f7" $chan "^f1]^f7 " (concatword $_ircname ": " $text))
			]
		]
	]
	ircname = (getword $buf 0)
	if (=s $ircname "><") [ // NICK >< EVENT [...] CHANNEL
		event = (getword $buf 1)
		nick = $chan
		if (=s $event "JOIN") [
			channel = (at $buf (- (listlen $buf) 1))
			if (=s $nick "Xbot") [
				zwall "^f0[^f7Info^f0]^f6 Racing Xtreme^f7 joined ^f1global chat"
			] [
				zwall (concatword "^f0join: ^f7" $nick " on ^f1" $channel)
			]
		] [
			if (=s $event "PART") [
				channel = (getword $buf 2)
				if (=s $nick "Xbot") [
					zwall "^f4[^f7Info^f4]^f6 Racing Xtreme^f7 left ^f1global chat"
				] [
					zwall (concatword "^f4leave: ^f7" $nick " from ^f1" $channel)
				]
			] [
				if (=s $event "QUIT") [
					if (=s $nick "Xbot") [
						zwall "^f4[^f7Info^f4]^f6 Racing Xtreme^f7 left ^f1global chat"
					] [
						zwall (concatword "^f4leave: ^f7" $nick " from ^f1IRC network")
					]
				]
			]
		]
	]
]
