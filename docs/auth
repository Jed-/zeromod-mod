Auth is authentication system in zeromod (and most other cube 2 game servers)
based on chalenge-response system.
It is more secure than usual passwords based login system.
To use auth system, both users and servers configuration files have to be
set up correctly. This document specifies a way you can easily setup auth
system in your server.

Auth system has some advantages and disadvantages. Firstly, auth is more secure,
easier to use and provides some useful features then it is set up correctly.
For example, administrators can use /authkick to kick players then using auth
(more about auth commands later). On the other hand, auth is harder to set up
(mostly because there isn't much documentation provided). Furthermore, auth
may be inapproprioate in some cases because both users and servers most have
separate keys.

How to setup authkey:
    To generate auth key pair you need to use /genauthkey command avaiable in
    cube 2 game clients. Syntax of this command is: /genauthkey secret-password
    secret-password is password of your keys (you must keep it very secret, it
    can be used to regenerate key pair if you lose it). For example:
    /genauthkey kjsbdckjsdbc
    if you pass same secret password to genauthkey, it will generate same keys.
    After genauthkey is executed, it will print both (public and private) keys
    in upper console (and also in terminal if you run it in terminal under
    Linux). Private key is needed for client, Public key is needed for server.

How to configure server:
    So you have public and private keys. What now? Now you need to put public
    key into server configuration file. Zeromod dedicated users.cfg file for
    this purpose, but feel free to put it anywhere you want (don't forget it
    must be executed by server). The first thing you need to know is syntax of
    commands which adds or removes authkeys to/from server.
        * serverauth -- sets server auth used by sauth/sauthkick commands or
        ->  authconnect; should uniquely identify your server or server group;
        ->  this may be your hostname, or clan name, or anything you want.
        ->  if you leave it empty, users wouldn't be able to use /sauth
        ->  and /sauthkick
        * clearusers -- clears users database
        * adduser name domain publickey privilege
        ->  name: username;
        ->  domain: domain used for key (if you set it to same domain as
        ->  serverauth, then users can use /sauth or /sauthkick commands
        ->  if not, then they must use /auth domain or
        ->  /dauthkick domain cn reason;
        ->  publickey: public key got from genauthkey
        ->  privilege: user privilege, may be one of these:
        ->  n m a r
        ->  n = no privilege    [NONSTANDARD]
        ->  m = authenticated Master
        ->  a = Administrator
        ->  r = Root            [NONSTANDARD]
    there is already done example with my authkey in users.cfg

How to configure client:
    Syntax for client is bit different.
    Authkeys manipulation commands:
        * authkey name key domain
        ->  name must be same name as is in server configuration files
        ->  key is private key generated by genauthkey
        ->  domain is same domain as written in server configuration or
        ->  empty if gauth is used
        * saveauthkeys
        ->  save auth keys to auth.cfg
        * genauthkey -- generates public/private key pair
        * autoauth bool -- controls autoauth behavour (use 0 to disable,
        ->  1 to enable (default))
        * hasauthkey name domain -- shows if client has auth key for specified
        ->  name/domain pair
        * hasauthkey -- executed without arguments shows if client has any
        ->  authkeys loaded
    Authkeys usage commands:
        * auth domain
        ->  claims auth if found suitable key with specified domain (or gauth
        ->  if domain is empty string)
        * sauth
        ->  claims auth is serverauth matches any of your authkeys
        ->  if serverauth is zero string then this function does nothing
        * authkick victim reason
        ->  searches authkey with empty domain and tries to kick as gauther
        * sauthkick victim reason
        ->  searches authkey with same domain as serverauth (fails if
        ->  serverauth is empty) and kicks as auther
        * dauthkick domain victim reason
        ->  finds suitabe authkey with specified domain and tries to use it
        ->  to kick victim

All in all:
    to test auth system do this:
    /genauthkey "some random data"
    copy public and private keys to some file
    edit auth.cfg (create if doesn't exist) in your sauerbraten folder and
    add such line:
    
    authkey test authkey _test
    
    (replace authkey with your private key (you saved it earlier))
    edit your server configuration file (users.cfg for ex.) and add this:
    
    serverauth _test
    clearusers
    adduser test _test pubkey a
    
    (replace pubkey with your public key)
    save changes to files
    restart server or reload server configuration
    restart cube 2 client
    connect to your server
    try typing /auth _test
    you now should be logged in
    now type /setmaster 0
    now you should lose your privileges
    now type /sauth
    if you used serverauth _test, you should be admin now

Conclusion:
    If you folowed this guide successfully you should be ready to set up servers
    with auth login system